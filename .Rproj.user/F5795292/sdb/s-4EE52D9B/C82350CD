{
    "collab_server" : "",
    "contents" : "library(twitteR)\nlibrary(ROAuth)\nlibrary(tm)\nlibrary(xlsx)\nlibrary(plyr)\nlibrary(stringr)\n\n#Twitter Credentials\napiKey <- 'OY9AlUG1fM49rytP7T8hqInoL'\napiSecret <- 'cjKBprKRaZoUUvwPUv7MX3NeRCehn8dSs9vBOwGjsbvAXBjI9s'\naccess_token <- '2195494530-V7csBiOqiffi69fZuhkZEqMRZO5xqHHWcSiBl9V'\naccess_token_secret <- 'CQ96GaCgeIFqq2XVPtigJnFVD9momtZqFBEsHpH8n7q3Z'\n\n#setting up twitter third party authentication\nsetup_twitter_oauth(apiKey,apiSecret,access_token,access_token_secret)\n\n#method to remove url from tweet text\nremoveURL <- function(x) gsub(\"http[[:alnum:][:punct:]]*\", \"\", x)\n\n#twitter search parameters\nsearchString <- c('@realDonaldTrump')\nno <- 100\nlang <- \"en\"\n\n#Method to score sentiment values\nscore.sentiment = function(tweets, pos.words, neg.words)\n{\n  require(plyr)\n  require(stringr)\n\n  scores = laply(tweets, function(tweet, pos.words, neg.words) {\n\n    tweet = gsub('https://','',tweet) # removes https://\n    tweet = gsub('http://','',tweet) # removes http://\n    tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters\n    #like emoticons\n    tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation\n    tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters\n    tweet = gsub('\\\\d+', '', tweet) # removes numbers\n    tweet=str_replace_all(tweet,\"[^[:graph:]]\", \" \")\n\n    tweet = tolower(tweet) # makes all letters lowercase\n\n    word.list = str_split(tweet, '\\\\s+') # splits the tweets by word in a list\n\n    words = unlist(word.list) # turns the list into vector\n\n    pos.matches = match(words, pos.words) ## returns matching\n    #values for words from list\n    neg.matches = match(words, neg.words)\n\n    pos.matches = !is.na(pos.matches) ## converts matching values to true of false\n    neg.matches = !is.na(neg.matches)\n\n    score = sum(pos.matches) - sum(neg.matches) # true and false are\n    #treated as 1 and 0 so they can be added\n\n    return(score)\n\n  }, pos.words, neg.words )\n\n  scores.df = data.frame(score=scores, text=tweets)\n\n  return(scores.df)\n\n} #end of sentiment method\n\n#positive and negative text dictionary\npos <- scan('e:/RTWitterAnalyser/positive-words.txt',what='character',comment.char = ';')\nneg <- scan('e:/RTWitterAnalyser/negative-words.txt',what='character',comment.char = ';')\n\n#extracting tweets from online\ntweets <- searchTwitter(searchString,no,lang)\n\n#converting tweets to data frame\nTweets.text = laply(tweets,function(t)t$getText()) # gets text from Tweets\n\nanalysis = score.sentiment(Tweets.text, pos, neg) # calls sentiment function\n\nhist(analysis$score) #produces an histogram grap\n\n# write.xlsx(analysis, \"e:/RTwitterAnalyser/myResults.xlsx\")\n",
    "created" : 1507269082866.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "125910109",
    "id" : "C82350CD",
    "lastKnownWriteTime" : 1506013157,
    "last_content_update" : 1506013157,
    "path" : "E:/RTwitterAnalyser/ir.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}